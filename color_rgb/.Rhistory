geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == "subcompact"),
se = FALSE
)
ola <- function(){
print('Olá, Esalq!')
}
ola()
ola <- function(){
print('Olá, Esalq!')
}
ola()
ola()
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == "subcompact"),
se = FALSE
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == "subcompact"),
se = FALSE
)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) # Uma mensagem de erro
?mpg # pedindo ajuda/informação
ggplot(data = mpg) +
geom_point(mapping = aes(x = cyl, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
# MAPEAMENTO ESTÉTICOS - página 7
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
# Top - alpha controla a transparência dos pontos
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
# Botton
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
# para manipular manualmente, a variável deve estar fora de aes
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), shape = 8) # de 0 até 20
# FACETAS - página 14
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
# OBJETOS GEOMÉTRICOS - página 16
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) # geom de pontos
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy)) # geom de smooth
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, linetype = drv),
show.legend = FALSE
)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == "subcompact"),
se = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == "compact"),
se = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == "compact"),
se = FALSE
)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut()))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
?geom_bar
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
demo <- reibble(
~a, ~b,
"bar_1", 20,
"bar_2", 30,
"bar_3", 40,
)
demo <- tribble(
~a, ~b,
"bar_1", 20,
"bar_2", 30,
"bar_3", 40,
)
ggplot(data = demo) +
geom_bar(
mapping = aes(x = a, y = b), stat = "identify"
)
ggplot(data = demo) +
geom_bar(
mapping = aes(x = a, y = b), stat = "identity"
)
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, y = ..prop.., group = 1)
)
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = medin
)
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun = medin
)
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.min = min,
fun.max = max,
fun = medin
)
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.min = min,
fun.max = max,
fun = median
)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, color = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(
data = diamonds,
mapping = aes(x = cut, fill = clarity)
) +
geom_bar(alpha = 1/5, position = "identity")
ggplot(
data = diamonds,
mapping = aes(x = cut, color = clarity)
) +
geom_bar(fill = NA, position = "identity")
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, color = clarity),
position = "fill"
)
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, color = clarity),
position = "dodge"
)
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, color = clarity),
position = "jitter"
)
ggplot(data = mpg) +
geom_point(
mapping = aes(x = displ, y = hwy),
position = "jitter"
)
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black")
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
state <- read.csv(file='C:/Users/Renato/Dropbox/pos_usp/usp_data_open/statistic/estatistica_pratica_para_ciencieas_de_dados/data/state.csv')
breaks <- seq(from=min(state[["Population"]]),
to=max(state[["Population"]]), length=11)
pop_freq <- cut(state[["Population"]], breaks=breaks,
right = TRUE, include.lowest = TRUE)
table(pop_freq)
View(state)
pop_freq
tabela <- table(pop_freq)
tabela
# Desfazendo notação cientifica
options(scipen = 999)
tabela <- table(pop_freq)
tabela
breaks <- seq(from=min(state[["Population"]]),
to=max(state[["Population"]]), length=11)
pop_freq <- cut(state[["Population"]], breaks=breaks,
right = TRUE, include.lowest = TRUE)
tabela <- table(pop_freq)
tabela
par("mar")          # corrigindo erro
par(mar=c(1,1,1,1)) # corrigindo erro
boxplot(state[["Population"]]/1000000, ylab="Population (millions)")
breaks <- seq(from=min(state[["Population"]]),
to=max(state[["Population"]]), length=11)
pop_freq <- cut(state[["Population"]], breaks=breaks,
right = TRUE, include.lowest = TRUE)
tabela <- table(pop_freq)
tabela
# histograma de populações estaduais
hist(state[["Population"]], breaks = breaks)
hist(state[["Muder.Rate"]], freq = FALSE)
hist(state[["Muder.Rate"]], pop_freq = FALSE)
hist(state[["Murder.Rate"]], freq=FALSE)
lines(density(state[["Murder.Rate"]], lwd=3, col="blue"))
?mean
help(mean)
# adicao
1 + 1
# subtracao
4 - 2
# multiplicacao
2 * 3
# divisao
5 / 3
num <- (1 + sqrt(5)) / 2
num
mtcars
head(mtcars)
class(mtcars)
nome <- "Renato Godoi da Cruz"
cidade <- "Araras"
estado <- "São Paulo"
nchar(nome)
paste(cidade, estado)
paste(cidade, estado)
paste(cidade, estado, sep = " - ")
paste(cidade, estado, " - ")
paste(cidade,  " - ", estado)
paste0(cidade,  " - ", estado)
vetor1 <- c(1, 5, 3, -10)
vetor2 <- c("a", "b", "c")
vetor1
1:10
-3:3
vetor1[2]
vetor[c(1, 4)]
vetor[c(1, 3)]
vetor1[c(1, 3)]
vetor1[c(1, 4)]
vetor1[c(1, 2, 4)]
vetor3 <- c(1, 2, "a")
vetor3
class(vetor3)
vetor4 + 1
vetor4 <- c(0, 5, 20, -3)
vetor4 + 1
vetor4 * 10
vetor5 <- c(1, 2, 3)
vetor6 <- c(10, 20, 30)
vetor5 + vetor6
vet <- c(0:5)
vet
vet[1]
vet[1, 5]
vet[c(1, 5)]
vet[c(1, 6)]
vet * 5
vet * -1
vet_negativo <- vet * -1
frutas <- c("banana", "maça", "mamão")
frutas
length(futas)
length(frutas)
paste("u gosto de", frutas)
paste("Eu gosto de", frutas)
sum(1:100)
dolar_subiu <- c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE)
length(dolar_subiu)
dolar_subiu[2]
length(dolar_subiu)
dolar_subiu[2]
sum(dolar_subiu)
length(dolar_subiu)
dolar_subiu[2]
sum(dolar_subiu)
mean(dolar_subiu)
## Pedindo ajuda
```{r pressure, echo=FALSE}
?mean
help(mean)
```
## R como calculadora
```{r pressure, echo=FALSE}
```{r pressure, echo=FALSE}
?mean
help(mean)
# adicao
1 + 1
# subtracao
4 - 2
# multiplicacao
2 * 3
# divisao
5 / 3
TRUE <- 1
TRUE <- 0
class(TRUE)
1 == 1
"a" == "a"
# Teste com resultado falso
"a" == "b"
1 == 2
1 != 1
"a" != "a"
1 !=2
"a" != "b"
3 > 3
3 >= 3
3 < 3
3 <= 3
3 %in% c(1, 2, 3)
"a" %in% c("b", "c")
minha_coluna <- c(1, 3, 0, 10, -1, 5, 20)
minha_coluna > 3
minha_coluna[minha_coluna > 3]
segredo <- round(runif(1, min = 0, max = 10))
segredo[segredo >= 0]
segredo[segredo <= 10]
if (x == 1){
Sys.time()
}
x <- 1
if(x == 1){
system.time()
}
mtcars$cyl == 4
Sys.time()
if(x == 1){
system.time()
}
x <- 1
if(x == 1){
system.time()
}
Sys.time()
x <-  c(1, 3, 10, 15)
if (class(x) == "numeric"){
sum()
}
sum(x)
x <- c("a", "b", "b")
if (class(x) == "numeric"){
sum(x)
}
soma <- function(x, y){
if (class(x) == "numeric" & class(y) == "numeric"){
x + y
}
}
# Retorna a soma
soma(1, 2)
# Não retorna nada
soma("a", "b")
if (class(x) == "numeric" & class(y) == "numeric"){
soma <- x + y
return(soma)
}
# Devolvendo um resuldado antecipadamente
minha_soma <- function(x, y){
if (class(x) == "numeric" & class(y) == "numeric"){
soma <- x + y
return(soma)
}
NA
}
# Retorna a soma
minha_soma(1, 2)
# Retorna NA
minha_soma("a", 1)
if  (class(x) == "numeric" | class(y) == "numeric"){
stop("A classe dos objetos x e y deve ser númerica.")
}
# Agora, devolve um erro
minha_soma <- function(x, y){
if  (class(x) != "numeric" | class(y) != "numeric"){
stop("A classe dos objetos x e y deve ser númerica.")
}
x + y
}
# Retorna a soma
minha_soma(1, 2)
# Retorna erro
minha_soma("a", 3)
# Vai fazer a soma
x <- c(1, 3, 10, 15)
if(class(x) == "numeric"){
sum(x)
} else{
NA
}
# Vai retornar NA
x <- c(1, 3, 19, "15")
if (class(x) == "numeric"){
sum(x)
} else{
NA
}
x <- 0
if(x < 0){
"Negativo"
} else if(x == 0) {
"Neutro"
} else if(x > 0) {
"Positivo"
}
numero_de_colunas <- ncol(mtcars)
for (coluna in 1: numero_de_colunas) {
media <- mean(mtcars[, coluna])
print(media)
}
nummero_de_colunas <- ncol(mtcars)
# Antes, criamos um vetor vazio.
medias <- c()
for (coluna in 1:numero_de_colunas) {
medias[coluna] <- mean(mtcars[,coluna])
}
medias
i <- 1
while (i < 3){
print(i)
i <- i + 1
}
set.seed(658)
ma <- matrix(rnorm(100*50), ncol = 50)
View(ma)
mean(ma)
var(ma[1, ])
ma[1,]
ma[, 1]
mean(ma[1, ])
mean(ma[, 1])
var(ma[1, ])
var(ma[, 1])
mean(ma[1,])
mean(ma[1,])
mean(ma[1,])
var(ma[1, ])
library(jpeg)
library(jpeg)
setwd("C:/Users/Renato/Dropbox/projetos/arquitetura_aberta/hacker/color_rgb")
img <- readJPEG("Rlogo.jpg")
dim(img)
img <- readJPEG("image.jpg")
img <- readJPEG("color.jpg")
dim(img)
img[35:39,50:54,]
library(jpeg)
img <- readJPEG("color.jpg")
dim(img)
print(dim(img))
